#ifndef _HADAMARD_H_INCLUDED_
#define _HADAMARD_H_INCLUDED_

#ifdef __cplusplus
		extern "C" {
#endif

#include "./nmtype.h"

    /**
    \defgroup 
    \ingroup 
    \brief
        Функция инициализпции матрицы Адамара.
		\~

    Функция инициализирует матрицу Адамара в каноничном виде.
		\~
		\~
    \param H
        Адрес начала матрицы.
		\~
    \param dim
        Количество строк или столбцов квадратной матрицы в элементах.
		\~
    \return \e void

    */
    //! \{
		void nmppsHadamardInit(nm2s* H, int dim);
    //! \}

//*****************************************************************************
    /**
    \defgroup 
    \ingroup 
    \brief
        Функция сортировки матрицы Адамара.
		\~

    Функция сортирует матрицу Адамара в зависимости от количества переходов с 1 на -1 и наоборот в строке.
		\~
		\~
    \param srcNaturalOrderdMtr
        Адрес начала матрицы Адамара.
		\~
    \param dstSequencyOrderedMtr
        Адрес начала отсортированной матрицы Адамара (результата).
		\~
	\param dim
        Количество строк или столбцов квадратной матрицы в элементах.
		\~
    \return \e void

    */
    //! \{
		void nmppsHadamardInitSort(nm2s* srcNaturalOrderdMtr, nm2s* dstSequencyOrderedMtr, int dim);
    //! \}

//*****************************************************************************
    /**
    \defgroup 
    \ingroup 
    \brief
        Функция преобразования Адамара.
		\~

    Функция умножает преобразуемую матрицу на матрицу Адамара слева и справа.
		\~
		\~
    \param src
        Адрес начала исходной матрицы.
		\~
    \param dst
        Адрес начала результата преобразования.
		\~
	\param H
        Адрес начала матрицы Адамара.
		\~
	\param temp
        Адрес начала временного массива, равного по размеру исходной матрице.
		\~
	\param size
        Количество строк или столбцов квадратной матрицы в элементах.
		\~
    \return \e void

    */
    //! \{
		void nmppsHadamard(nm32s* src, nm32s* dst, nm2s* H, nm32s* temp, int size);
    //! \}

//*****************************************************************************
    /**
    \defgroup 
    \ingroup 
    \brief
        Функция обратного преобразования Адамара.
		\~

    Функция получает оригинальную матрицу после преобразования Адамара.
		\~
		\~
    \param src
        Адрес начала исходной матрицы.
		\~
    \param dst
        Адрес начала результата.
		\~
	\param H
        Адрес начала матрицы Адамара.
		\~
	\param temp
        Адрес начала временного массива, равного по размеру исходной матрице.
		\~
	\param size
        Количество строк или столбцов квадратной матрицы в элементах.
		\~
    \return \e void

    */
    //! \{
		void nmppsHadamardInverse(nm32s* src, nm32s* dst, nm2s* H, nm32s* temp, int size);
    //! \}

//*****************************************************************************
    /**
    \defgroup 
    \ingroup 
    \brief
        Функция умножение матрицы на матрицу.
		\~

    Функция умножает 2-разрядную матрицу на 32-разрядную.
		\~
		\~
    \param A
        Адрес начала 2-разрядной матрицы.
		\~
    \param H
        Количество строк 2-разрядной матрицы (определяет количество строк результата).
		\~
	\param W1
        Количество столбцов 2-разрядной матрицы (равно количеству строк 32-разрядной).
		\~
	\param B
        Адрес начала 32-рязрядной матрицы.
		\~
	\param C
        Адрес результата.
		\~
	\param W2
        Количество столбцов 32-разрядной матрицы (определяет количество столбцов результата).
		\~
    \return \e void

    */
    //! \{
		void nmppsMulMM_2s32s(nm2s* A, int H, int W1, nm32s* B, nm32s* C, int W2);
    //! \}

//*****************************************************************************
    /**
    \defgroup 
    \ingroup 
    \brief
        Функция умножение матрицы на 2 столбца другой матрицы.
		\~

    Функция умножает 2-разрядную матрицу на 2 столбца 32-разрядной.
		\~
		\~
    \param A
        Адрес начала 2-разрядной матрицы.
		\~
    \param H
        Количество строк 2-разрядной матрицы.
		\~
	\param W1
        Количество столбцов 2-разрядной матрицы.
		\~
	\param B
        Адрес начала столбца 32-рязрядной матрицы.
		\~
	\param C
        Адрес результата столбца.
		\~
	\param W2
        Количество столбцов 32-разрядной матрицы (используется для смещения).
		\~
    \return \e void

    */
    //! \{
		void nmppsMulMM_2s32s_2col(nm2s* A, int H, int W1, nm32s* B, nm32s* C, int W2);
    //! \}

//*****************************************************************************
    /**
    \defgroup 
    \ingroup 
    \brief
        Функция получения хеш-суммы массива.
		\~

    Функция получает хеш-сумму 64-разрядного массива в виде 32-разрядного числа.
		\~
		\~
    \param a
        Адрес начала массива.
		\~
    \param size
        Количество 64-разрядных элементов в массиве.
		\~
    \return \e unsigned

    */
    //! \{
		unsigned nmppsHash64u(long long * a, int size);
    //! \}

//*****************************************************************************
    /**
    \defgroup 
    \ingroup 
    \brief
        Функция транспонирования матрицы.
		\~

    Функция меняет строки на столбцы в матрице.
		\~
		\~
    \param matrica
        Адрес начала исходной матрицы.
		\~
    \param result
        Адрес наачла транспонированной матрицы (результата).
		\~
	\param height
        Количество строк исходной матрицы.
		\~
	\param width
        Количество столбцов исходной матрицы.
		\~
    \return \e void

    */
    //! \{
		void nmppsTranspose(int* matrica, int* result, int height, int width)
    //! \}

#ifdef __cplusplus
	};
#endif
#endif // _HADAMARD_H_INCLUDED_
